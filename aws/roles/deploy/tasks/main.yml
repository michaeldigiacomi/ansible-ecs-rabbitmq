- name: "Gather information about ampq target group"
  elb_target_group_info:
    names:
      - "{{ envOverride }}-rabbitmq-asg-amqp"
  register: ampqtg

- name: "Gather information about http target group"
  elb_target_group_info:
    names:
      - "{{ envOverride }}-rabbitmq-asg-http"
  register: httptg

- name: "Gather information about execution role"
  iam_role_info:
    name: "{{ envOverride }}-RabbitMQ-task-execution-role"
  register: executionrole

- name: "Create RabbitMQ Task Definition"
  ecs_taskdefinition:
    family: "rabbitmq"
    launch_type: EC2
    network_mode: host
    execution_role_arn: "{{executionrole.iam_roles[0].arn}}"
    containers:
      - name: "RabbitMQ"
        image: "{{defaults.container_name}}:{{defaults.container_version}}"
        cpu: "{{defaults.cpu_assigned}}" 
        memory: "{{defaults.memory_assigned}}"
        essential: true
        portMappings:
          - containerPort: "{{ampqtg.target_groups[0].port}}"
            hostPort: "{{ampqtg.target_groups[0].port}}"
          - containerPort: "{{httptg.target_groups[0].port}}"
            hostPort: "{{httptg.target_groups[0].port}}"
        environment:
          - name: "RABBITMQ_ERLANG_COOKIE"
            value: "{{defaults.erlang_cookie}}"
          - name: "CLUSTERED"
            value: "true"
    cpu: "{{defaults.cpu_assigned}}" 
    memory: "{{defaults.memory_assigned}}"
    state: present

- name: "Create service definition"
  ecs_service:
    name: "rabbitmq"
    cluster: "{{ environment }}_cluster"
    task_definition: "rabbitmq"
    launch_type: EC2
    desired_count: "{{defaults.desired_count}}"
    health_check_grace_period_seconds: "{{defaults.health_check_grace_period_seconds}}"
    load_balancers:
      - targetGroupArn: "{{ ampqtg.target_groups[0].target_group_arn }}"
        containerName: "RabbitMQ"
        containerPort: "{{ampqtg.target_groups[0].port}}"
      - targetGroupArn: "{{ httptg.target_groups[0].target_group_arn }}"
        containerName: "RabbitMQ"
        containerPort: "{{httptg.target_groups[0].port}}"
    deployment_configuration:
      minimum_healthy_percent: "{{defaults.minimum_healthy_percent}}"
      maximum_percent: "{{defaults.maximum_percent}}"
    state: present